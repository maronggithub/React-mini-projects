{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst weatherDataStore = createSlice({\n  name: \"weatherdata\",\n  initialState: {\n    cityName: \"\",\n    weatherData: \"\",\n    cityPhoto: \"\"\n  },\n  reducers: {\n    // 在recucer里面设置action\n    setCityName: (state, action) => {\n      state.cityName = action.payload;\n    },\n    setWeatherData: (state, action) => {\n      state.weatherData = action.payload;\n    },\n    setCityPhoto: (state, action) => {\n      state.cityPhoto = action.payload;\n    }\n  }\n});\nconst {\n  setCityName,\n  setWeatherData,\n  setCityPhoto\n} = weatherDataStore.actions;\n//异步请求部分\n\n// 调用 API 获取城市名字\nconst fetchUserCity = () => {\n  return async dispatch => {\n    try {\n      const cityRes = await axios.get(\"http://ip-api.com/json/\");\n      console.log(cityRes);\n      dispatch(setCityName(cityRes.data.city));\n    } catch (error) {\n      console.error(\"Error fetching user city:\", error);\n    }\n  };\n};\nconst fetchWeatherData = () => {\n  return async (dispatch, getState) => {\n    const apiKey = \"1b18bc4c88485aa26026e6d4f1726052\";\n    const state = getState();\n    const cityName = state.weatherdata.cityName;\n    console.log(cityName);\n    if (cityName) {\n      try {\n        const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${apiKey}`;\n        const WeatherRes = await axios.get(apiUrl);\n        dispatch(setWeatherData(WeatherRes.data));\n        console.log(WeatherRes);\n      } catch (error) {\n        console.error(\"Error fetching weather data:\", error);\n      }\n    }\n  };\n};\nconst fetchCityPhoto = () => {\n  return async (dispatch, getState) => {\n    const cityPhotoApiKey = \"m11T5e9rUfdnl2S3CWAjMNRmyDLM3lH8m4p-ARMBALs\";\n    const state = getState();\n    const cityName = state.weatherdata.cityName;\n    console.log(cityName);\n    if (cityName) {\n      try {\n        const apiUrl = `https://api.unsplash.com/search/photos?page=1&query=${cityName}&client_id=${cityPhotoApiKey}`;\n        const cityPhotoRes = await axios.get(apiUrl);\n        dispatch(setCityPhoto(cityPhotoRes.data.results[0].urls.regular));\n        console.log(cityPhotoRes);\n      } catch (error) {\n        console.error(\"Error fetching photo data:\", error);\n      }\n    }\n  };\n};\nconst weatherDataReducer = weatherDataStore.reducer;\nexport { setCityName, fetchUserCity, fetchWeatherData, fetchCityPhoto };\nexport default weatherDataReducer;","map":{"version":3,"names":["createSlice","axios","weatherDataStore","name","initialState","cityName","weatherData","cityPhoto","reducers","setCityName","state","action","payload","setWeatherData","setCityPhoto","actions","fetchUserCity","dispatch","cityRes","get","console","log","data","city","error","fetchWeatherData","getState","apiKey","weatherdata","apiUrl","WeatherRes","fetchCityPhoto","cityPhotoApiKey","cityPhotoRes","results","urls","regular","weatherDataReducer","reducer"],"sources":["/Users/joy/Desktop/React-mini-projects/temperature-converter-app/src/store/modules/weatherData.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n\nconst weatherDataStore = createSlice({\n  name: \"weatherdata\",\n  initialState: {\n    cityName: \"\",\n    weatherData: \"\",\n    cityPhoto: \"\",\n  },\n  reducers: {\n    // 在recucer里面设置action\n    setCityName: (state, action) => {\n      state.cityName = action.payload;\n    },\n    setWeatherData: (state, action) => {\n      state.weatherData = action.payload;\n    },\n    setCityPhoto: (state, action) => {\n      state.cityPhoto = action.payload;\n    },\n  },\n});\n\nconst { setCityName, setWeatherData, setCityPhoto } = weatherDataStore.actions;\n//异步请求部分\n\n// 调用 API 获取城市名字\nconst fetchUserCity = () => {\n  return async (dispatch) => {\n    try {\n      const cityRes = await axios.get(\"http://ip-api.com/json/\");\n      console.log(cityRes);\n      dispatch(setCityName(cityRes.data.city));\n    } catch (error) {\n      console.error(\"Error fetching user city:\", error);\n    }\n  };\n};\n\nconst fetchWeatherData = () => {\n  return async (dispatch, getState) => {\n    const apiKey = \"1b18bc4c88485aa26026e6d4f1726052\";\n    const state = getState();\n    const cityName = state.weatherdata.cityName;\n    console.log(cityName);\n\n    if (cityName) {\n      try {\n        const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${apiKey}`;\n        const WeatherRes = await axios.get(apiUrl);\n        dispatch(setWeatherData(WeatherRes.data));\n        console.log(WeatherRes);\n      } catch (error) {\n        console.error(\"Error fetching weather data:\", error);\n      }\n    }\n  };\n};\n\nconst fetchCityPhoto = () => {\n    return async (dispatch, getState) => {\n        const cityPhotoApiKey = \"m11T5e9rUfdnl2S3CWAjMNRmyDLM3lH8m4p-ARMBALs\";\n        const state = getState();\n        const cityName = state.weatherdata.cityName;\n        console.log(cityName);\n        if (cityName) {\n            try {\n                const apiUrl = `https://api.unsplash.com/search/photos?page=1&query=${cityName}&client_id=${cityPhotoApiKey}`;\n                const cityPhotoRes = await axios.get(apiUrl);\n                dispatch(\n                setCityPhoto(cityPhotoRes.data.results[0].urls.regular)\n                );\n                console.log(cityPhotoRes);\n\n            } catch (error) {\n                console.error(\"Error fetching photo data:\", error);\n\n            }\n        }\n\n    };\n};\n\nconst weatherDataReducer = weatherDataStore.reducer;\nexport { setCityName,fetchUserCity,fetchWeatherData,fetchCityPhoto};\nexport default weatherDataReducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}